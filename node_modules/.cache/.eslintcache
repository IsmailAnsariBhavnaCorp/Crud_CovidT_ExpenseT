[{"D:\\reactcrud\\employee_management\\src\\index.js":"1","D:\\reactcrud\\employee_management\\src\\App.js":"2","D:\\reactcrud\\employee_management\\src\\EmployeesList.jsx":"3","D:\\reactcrud\\employee_management\\src\\EmployeeData.jsx":"4","D:\\reactcrud\\employee_management\\src\\ManageEmployeeForm.jsx":"5"},{"size":256,"mtime":1667389060539,"results":"6","hashOfConfig":"7"},{"size":344,"mtime":1667472512805,"results":"8","hashOfConfig":"7"},{"size":4408,"mtime":1667480355976,"results":"9","hashOfConfig":"7"},{"size":441,"mtime":1667390583735,"results":"10","hashOfConfig":"7"},{"size":1648,"mtime":1667395544496,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u8hbdx",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"D:\\reactcrud\\employee_management\\src\\index.js",[],[],"D:\\reactcrud\\employee_management\\src\\App.js",["30"],[],"import React from 'react';\nimport './App.css';\nimport EmployeesList from './EmployeesList';\nimport ManageEmployeeForm from './ManageEmployeeForm';\n\n\nfunction App(){\n  return(\n  <>\n  <div>\n     <h1 style={{margin:'15px'}}>Manage Employees</h1>\n     <EmployeesList/>\n     {/* <ManageEmployeeForm/> */}\n   </div>\n  </>\n  )\n}\n\n\nexport default App;\n","D:\\reactcrud\\employee_management\\src\\EmployeesList.jsx",["31","32","33","34","35","36"],[],"import React from 'react';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst EmployeesList= () =>{\r\n\r\n    const [fields,setfields]=useState( {\r\n        Code:'',\r\n        Name:'',\r\n        Designation:'',\r\n    });\r\n\r\n    const [fieldsArr,setfieldsArr]=useState( [{\r\n        Code:'',\r\n        Name:'',\r\n        Designation:'',\r\n    }]);\r\n\r\n//Setting Values Of Input Fileds Start\r\n function SetValueInHeading(event)  {\r\n\r\n    const value=event.target.value;\r\n    const name=event.target.name;\r\n    \r\n    setfields ((preValue) =>{\r\n        return{\r\n            ...preValue,\r\n            [name]:value, \r\n        }\r\n    })\r\n    }\r\n//Setting Values Of Input Fileds Start\r\n\r\n\r\n//After Submit Data Fill In a Table Start\r\nfunction SetValueInHeadingAfterSubmit(eventSetValueInHeadingAfterSubmit) {\r\n\r\neventSetValueInHeadingAfterSubmit.preventDefault();\r\nconst code= document.getElementsByClassName(\"code\")[0].value;\r\n\r\nif(fieldsArr.filter(item => item.Code === code).length === 0 ) \r\n     {\r\n    setfieldsArr(fieldsArr => fieldsArr.concat(fields))\r\n   console.log(fieldsArr);\r\n}\r\nelse{\r\n\r\n    for (var i=0; i < fieldsArr.length ; i++) {\r\n        debugger\r\n        if(fieldsArr[i].Code === code){\r\n            debugger\r\n            fieldsArr[i].Name= fields.Name;\r\n            fieldsArr[i].Designation= fields.Designation;\r\n\r\n       \r\n        }\r\n    }\r\n    debugger\r\n    setfieldsArr([...fieldsArr])\r\n}\r\n\r\nFormReset();\r\n\r\n}\r\n//After Submit Data Fill In a Table End\r\n\r\nfunction FormReset(){\r\n    document.getElementById(\"employeeForm\").reset();\r\n    document.getElementById('formheading_1').textContent = 'Create Employees';\r\n}\r\n\r\n\r\n//Delete record Start\r\nfunction DeleteRecord(event){\r\nconst fieldsArr_new = fieldsArr.filter(item => item.Code !== event.target.getAttribute('data-Code'));\r\nsetfieldsArr(fieldsArr_new);\r\n}\r\n//Delete record End\r\n\r\n///Updated record Start\r\nfunction UpdateRecord(event){\r\n    const fieldsArr_new = fieldsArr.filter(item => item.Code === event.target.getAttribute('data-Code'));\r\n    document.getElementsByClassName(\"code\")[0].value = fieldsArr_new[0].Code;\r\n    document.getElementsByClassName(\"name\")[0].value = fieldsArr_new[0].Name;\r\n    document.getElementsByClassName(\"designation\")[0].value = fieldsArr_new[0].Designation;\r\n    document.getElementById('formheading_1').textContent = 'Update Employees';\r\n    console.log(fieldsArr);\r\n\r\n    }\r\n///Updated record End\r\n\r\nreturn(\r\n<>\r\n<table className='styled-table'>\r\n    <thead>\r\n        <tr>\r\n            <th>Code</th>\r\n            <th>Name</th>\r\n            <th>Designation</th>\r\n            <th>Action</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        {\r\n            fieldsArr.map((employee,index)=>{\r\n                if(employee.Code != null && employee.Code != ''){\r\n                return(\r\n                <>\r\n               <tr>\r\n                <td>{employee.Code}</td>\r\n                <td>{employee.Name}</td>\r\n                <td>{employee.Designation}</td>\r\n                <td>\r\n                    <a href='#'  data-Code={employee.Code} onClick={UpdateRecord}>Update</a><span>  </span>\r\n                    <a href='#' data-Code={employee.Code} onClick={DeleteRecord} >delete</a>\r\n                    </td>\r\n                </tr>\r\n                </>\r\n                )\r\n            }\r\n            })\r\n        }\r\n       \r\n\r\n    </tbody>\r\n</table>\r\n\r\n<hr className=\"new1\" style={{borderTop:'1px solid red'}}/>\r\n<hr className=\"new1\" style={{borderTop:'1px solid red'}}/>\r\n\r\n\r\n<div className='Red-background' style={{margin:'15px'}}>\r\n<form style={{margin:'15px'}} onSubmit={SetValueInHeadingAfterSubmit} id='employeeForm'> \r\n  <h2 id='formheading_1'>Create Employees</h2>\r\n  <input type=\"text\" name='Code' className='code' onChange={SetValueInHeading} placeholder=\"Enter employee code\" required/>  <br/> <br/>\r\n  <input type=\"text\" name='Name' className='name' onChange={SetValueInHeading} placeholder=\"Enter employee name\" required/>  <br/> <br/>\r\n  <input type=\"text\" name='Designation' className='designation' onChange={SetValueInHeading} placeholder=\"Enter employee designation\" required/>  <br/> <br/>\r\n  <br/> <br/>\r\n  <button type='submit' className='button-1' role=\"button\">Submit</button>\r\n  <button type='button' onClick={FormReset} className='button-1' style={{backgroundColor:'red',marginLeft:'15px'}} role=\"button\">Cancel</button>\r\n</form>\r\n<br/> <br/>\r\n</div>\r\n</>\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeesList;","D:\\reactcrud\\employee_management\\src\\EmployeeData.jsx",["37"],[],"D:\\reactcrud\\employee_management\\src\\ManageEmployeeForm.jsx",["38"],[],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport './App.css';\r\n\r\n\r\n// const ManageEmployeeForm= () =>{\r\n//     const [fields,setfields]=useState( {\r\n//         Code:'',\r\n//         Name:'',\r\n//         Designation:'',\r\n//     });\r\n\r\n    const ManageEmployeeForm= () =>{\r\n        const [fields,setfields]=useState( [{\r\n            Code:'',\r\n            Name:'',\r\n            Designation:'',\r\n        }]);\r\n\r\n    const SetValueInHeading= (event) => {\r\n\r\n        const value=event.target.value;\r\n        const name=event.target.name;\r\n        \r\n        setfields ((preValue) =>{\r\n            return{\r\n                ...preValue,\r\n                [name]:value,\r\n            \r\n            }\r\n        })\r\n        }\r\n\r\n\r\n\r\nconst SetValueInHeadingAfterSubmit= (eventSetValueInHeadingAfterSubmit) => {\r\n    eventSetValueInHeadingAfterSubmit.preventDefault();\r\n    console.log(fields);\r\n    alert(fields.Code + ' ' +fields.Name + ' ' + fields.Designation);\r\n}\r\n\r\n\r\nreturn(\r\n<>\r\n<div className='Red-background'>\r\n<form onSubmit={SetValueInHeadingAfterSubmit}> \r\n  <h2>Manage Employees</h2>\r\n  <input type=\"text\" name='Code' onChange={SetValueInHeading} placeholder=\"Enter employee code\" required/>  <br/> <br/>\r\n  <input type=\"text\" name='Name' onChange={SetValueInHeading} placeholder=\"Enter employee name\" required/>  <br/> <br/>\r\n  <input type=\"text\" name='Designation' onChange={SetValueInHeading} placeholder=\"Enter employee designation\" required/>  <br/> <br/>\r\n  <br/> <br/>\r\n  <button type='submit' className='button-1' role=\"button\">Submit</button>\r\n</form>\r\n<br/> <br/>\r\n</div>\r\n</>\r\n);\r\n}\r\n\r\nexport default ManageEmployeeForm;",{"ruleId":"39","severity":1,"message":"40","line":4,"column":8,"nodeType":"41","messageId":"42","endLine":4,"endColumn":26},{"ruleId":"43","severity":1,"message":"44","line":105,"column":43,"nodeType":"45","messageId":"46","endLine":105,"endColumn":45},{"ruleId":"47","severity":1,"message":"48","line":106,"column":59,"nodeType":"49","messageId":"50","endLine":106,"endColumn":61},{"ruleId":"51","severity":1,"message":"52","line":114,"column":21,"nodeType":"53","endLine":114,"endColumn":83},{"ruleId":"51","severity":1,"message":"52","line":115,"column":21,"nodeType":"53","endLine":115,"endColumn":83},{"ruleId":"54","severity":1,"message":"55","line":139,"column":3,"nodeType":"53","endLine":139,"endColumn":60},{"ruleId":"54","severity":1,"message":"55","line":140,"column":3,"nodeType":"53","endLine":140,"endColumn":130},{"ruleId":"39","severity":1,"message":"56","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":13},{"ruleId":"54","severity":1,"message":"55","line":52,"column":3,"nodeType":"53","endLine":52,"endColumn":60},"no-unused-vars","'ManageEmployeeForm' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","'React' is defined but never used."]